import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.Arrays;
import java.util.StringTokenizer;

public class DNA_11961 {
	
	static char[] alpha = {'A', 'C', 'G', 'T'};
	static int N, K;
	static PrintWriter out;
	static int count;
	
	public static void perm(int i, int remC, char[] c){
		System.out.println(i + " " + remC + " " + Arrays.toString(c));
		if(remC == 0){
			for (int j = 0; j < N; j++) {
				out.print(c[j]);
			}
			out.println();
			
			count++;
			return;
		}
		if(i == N)
			return;
		
		perm(i + 1, remC, c);
		int j = Arrays.binarySearch(alpha, c[i]);
		
		for (; j < 4; j++) {
			if(c[i] == alpha[j]) continue;			
			char[] cc = c.clone();
			cc[i] = alpha[j];
			
			perm(i + 1, remC - 1, cc);
		}
	}
	
	public static void main(String[] args) throws IOException {
		BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
		out = new PrintWriter(System.out);
		
		int t = Integer.parseInt(in.readLine());
		
		while(t-- > 0){
			StringTokenizer s = new StringTokenizer(in.readLine());
			
			N = Integer.parseInt(s.nextToken());
			K = Integer.parseInt(s.nextToken());
			
			char[] input = new char[N];
			
			String st = in.readLine();
			for (int i = 0; i < N; i++) {
				input[i] = st.charAt(i);
			}
			
			count = 0;
			
			perm(0, K, input);
			
			System.out.println(count);
			out.flush();
		}
		
		out.close();
	}
}
