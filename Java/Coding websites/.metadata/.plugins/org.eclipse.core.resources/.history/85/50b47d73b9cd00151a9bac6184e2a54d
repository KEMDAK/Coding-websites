import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.StringTokenizer;

public class Multitasking_11926 {

	static final int NO_REPEAT = 1000000000;

	public static void main(String[] args) throws IOException {
		BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
		PrintWriter out = new PrintWriter(System.out);

		while(true){
			StringTokenizer s = new StringTokenizer(in.readLine());
			int n = Integer.parseInt(s.nextToken());
			int m = Integer.parseInt(s.nextToken());

			if (n == 0 && m == 0)
				break;

			ArrayList<Interval> tasks = new ArrayList<>();
			
			boolean valid = true;
			for (int i = 0; i < n + m; i++) {
				s = new StringTokenizer(in.readLine());
				
				if(!valid) continue;
				
				int start = Integer.parseInt(s.nextToken());
				int end = Integer.parseInt(s.nextToken());
				int repeat = NO_REPEAT;
				if(s.hasMoreTokens()){
					repeat = Integer.parseInt(s.nextToken());
					
					if(end - start > repeat)
						valid = false;
				}
				
				Interval interval = new Interval(start, end, repeat);
				
				for (int j = 0; j < tasks.size() && valid; j++) {
					if(interval.conflict(tasks.get(j))){
						valid = false;
						break;
					}
				}
				
				tasks.add(interval);
			}
			
			if(!valid)
				out.println("CONFLICT");
			else
				out.println("NO CONFLICT");
		}

		out.flush();
		out.close();
	}

	private static class Interval{
		int start, end, repeat;

		public Interval(int start, int end, int repeat) {
			this.start = start;
			this.end = end;
			this.repeat = repeat;
		}

		public boolean conflict(Interval i){
			if(this.repeat == NO_REPEAT && i.repeat == NO_REPEAT){
				if(this.start >= i.end || this.end <= i.start)
					return false;
				return true;
			}
			else{
				Interval small = new Interval(start, end, repeat);
				Interval great = new Interval(i.start, i.end, i.repeat);
				if(this.start >= i.end){
					Interval temp = small;
					small = great;
					great = temp;
				}
				else if(!(this.end <= i.start)){
					return true;
				}
				
				Interval diff = new Interval(great.start - small.start, great.end - small.end, -1);
				int dist = Math.max(diff.start / small.repeat, diff.end / small.repeat);
				dist *= small.repeat;
				
				small.start += dist;
				small.end += dist;
				
				System.out.println(dist);
				if(small.start >= great.end || small.end <= great.start)
					return false;
				return true;
			}
		}
	}
}
