import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.StringTokenizer;

public class StreetDirections_610 {

	static ArrayList<Integer>[] adjList;
	static int[] dfs_low, dfs_num, parent;
	static int V, counter;
	static boolean[] artPoints;

	public static void main(String[] args) throws IOException {
		BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
		PrintWriter out = new PrintWriter(System.out);

		while(true){
			StringTokenizer s = new StringTokenizer(in.readLine());

			int n = Integer.parseInt(s.nextToken());
			int m = Integer.parseInt(s.nextToken());

			if(n == 0 && m == 0)
				break;

			V = n;

			adjList = new ArrayList[V];
			for (int i = 0; i < V; i++) {
				adjList[i] = new ArrayList<>();
			}

			for (int i = 0; i < m; i++) {
				s = new StringTokenizer(in.readLine());

				int src = Integer.parseInt(s.nextToken());
				int dest = Integer.parseInt(s.nextToken());

				adjList[src].add(dest);
				adjList[dest].add(src);
			}

			parent = new int[V];
			dfs_low = new int[V];
			dfs_num = new int[V];
			
			counter = 0;
			
			for(int i = 0; i < V; ++i)
				if(dfs_num[i] == 0)
				{
					root = i;
					rootChildren = 0;
					dfs(i);	
					artPoints[i] = rootChildren > 1;
				}
		}
	}
	
    static void dfs(int u) {
	dfs_num[u] = dfs_low[u] = ++counter;
	for(int v: adjList[u])
	    if(dfs_num[v] == 0)
	    {
		parent[v] = u;
		
		dfs(v);
		
		if(dfs_low[v] > dfs_num[u])
		    System.out.printf("Bridge between %d %d\n", u, v);
		
		dfs_low[u] = Math.min(dfs_low[v], dfs_low[u]);
	    }
	    else
		if(parent[u] != v)
		    dfs_low[u] = Math.min(dfs_low[u], dfs_num[v]);
    }
}
