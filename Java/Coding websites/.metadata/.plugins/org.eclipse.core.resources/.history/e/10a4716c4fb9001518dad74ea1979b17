import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.StringTokenizer;

public class PerfectHash_188 {

	static ArrayList<Integer> words;
	static int c;
	
	public static void main(String[] args) throws IOException {
		BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
		PrintWriter out = new PrintWriter(System.out);
		
		long curt = System.currentTimeMillis();
		while(System.currentTimeMillis() - curt < 3000){};
		
		while(in.ready()){
			String line = in.readLine();
			
			StringTokenizer s = new StringTokenizer(line);
			
			words = new ArrayList<>();
			
			while(s.hasMoreTokens()){
				String word = s.nextToken();
				int w = 0;
				
				for (int i = 0; i < word.length(); i++)
					w += (word.charAt(i) - 'a') * Math.pow(32, i);
				
				words.add(w);
			}
			
			c = 1;
			
			while(true){
				boolean hasConflict = false;
				
				int maxC = 1;
				for (int i = 0; i < words.size(); i++) {
					for (int j = 0; j < words.size(); j++) {
						if(i == j) continue;
						
						int ci = (((c / words.get(i))) * words.get(i));
						int cj = (((c / words.get(j))) * words.get(j));
						
						int minC = -1;
						if(ci == cj){
							ci = (((c / words.get(i)) + 1) * words.get(i));
							cj = (((c / words.get(j)) + 1) * words.get(j));
							
							minC = Math.min(ci, cj);
							hasConflict = true;
						}
						
						maxC = Math.max(maxC, minC);
					}
				}
				
				if(!hasConflict)
					break;
				else
					c = maxC;
			}
			
			out.println(line);
			out.println(c);
		}
		
		out.flush();
		out.close();
	}
}
