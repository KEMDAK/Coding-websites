import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.StringTokenizer;

public class Multitasking_11926 {

	static final int NO_REPEAT = 1000000000;

	public static void main(String[] args) throws IOException {
		BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
		PrintWriter out = new PrintWriter(System.out);

		while(true){
			StringTokenizer s = new StringTokenizer(in.readLine());
			int n = Integer.parseInt(s.nextToken());
			int m = Integer.parseInt(s.nextToken());

			if (n == 0 && m == 0)
				break;

			boolean valid = true;
			boolean[] time = new boolean[1000005];
			for (int i = 0; i < n + m; i++) {
				s = new StringTokenizer(in.readLine());
				
				if(!valid) continue;
				
				int start = Integer.parseInt(s.nextToken());
				int end = Integer.parseInt(s.nextToken());
				int repeat = NO_REPEAT;
				if(s.hasMoreTokens()){
					repeat = Integer.parseInt(s.nextToken());
					
					if(end - start > repeat)
						valid = false;
					
					for (int j = start, k = end; j <= 1000000 && valid; j = j + repeat, k = k + repeat) {
						for (int l = j; l <= k && l <= 1000000 && valid; l++) {
							if(time[l] && l != j && l != k)
								valid = false;
							time[l] = true;
						}
					}
				}
				else{
					for (int l = start; l <= end && valid; l++) {
						if(time[l] && l != start && l != end)
							valid = false;
						time[l] = true;
					}
				}				
			}
			
			if(!valid)
				out.println("CONFLICT");
			else
				out.println("NO CONFLICT");
		}

		out.flush();
		out.close();
	}
}
