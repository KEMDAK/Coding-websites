import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.StringTokenizer;

public class NewToBangladesh_10525 {

	
	public static void main(String[] args) throws NumberFormatException, IOException {
		BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
		PrintWriter out = new PrintWriter(System.out);
		
		int t = Integer.parseInt(in.readLine());
		
		while(t-- > 0){
			in.readLine();
			
			StringTokenizer s = new StringTokenizer(in.readLine());
			
			int n = Integer.parseInt(s.nextToken());
			int m = Integer.parseInt(s.nextToken());
			
			ArrayList<road>[] adj = new ArrayList[n];
			int parent[][] = new int[n][n];
			int sTime[][] = new int[n][n];
			
			for(int i = 0; i < n; i++)
			    for(int j = 0; j < n; j++)
			    	parent[i][j] = i;
			
			for (int i = 0; i < n; i++){
				Arrays.fill(sTime, 1000000000);
				sTime[i][i] = 0;
			}
			
			for (int i = 0; i < m; i++) {
				s = new StringTokenizer(in.readLine());
				
				int src = Integer.parseInt(s.nextToken()) - 1;
				int dest = Integer.parseInt(s.nextToken()) - 1;
				int time = Integer.parseInt(s.nextToken());
				int length = Integer.parseInt(s.nextToken());
				
				adj[src].add(new road(dest, time, length));
				adj[dest].add(new road(src, time, length));
			}
			
			for(int k = 0; k < n; k++)
			    for(int i = 0; i < n; i++)
				      for(int j = 0; j < n; j++)
				          if(sTime[i][j] > sTime[i][k] + sTime[k][j]) {
				        	  sTime[i][j] = sTime[i][k] + sTime[k][j];
				        	  parent[i][j] = parent[k][j];
				    }
		    }
			
			int q = Integer.parseInt(in.readLine());
			
			for (int i = 0; i < q; i++) {
				s = new StringTokenizer(in.readLine());
				
				int src = Integer.parseInt(s.nextToken());
				int dest = Integer.parseInt(s.nextToken());
				
				if(dist[] != -1)
					out.printf("Distance and time to reach destination is %d & %d.\n", dist, time);
				else
					out.println("No Path.");
			}
			
			out.println();
		}
		
		out.flush();
		out.close();
	}
	
	static class road{
		int dest, time, length;
		
		public road(int dest, int time, int length) {
			this.dest = dest;
			this.time = time;
			this.length = length;
		}
	}
}
