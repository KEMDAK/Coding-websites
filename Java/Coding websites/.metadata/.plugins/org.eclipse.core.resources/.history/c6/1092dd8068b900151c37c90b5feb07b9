import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Stack;
import java.util.TreeMap;

public class ShellSort_10152 {

	
	public static void main(String[] args) throws NumberFormatException, IOException {
		BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
		PrintWriter out = new PrintWriter(System.out);
		
		int t = Integer.parseInt(in.readLine());
		
		while(t-- > 0){
			int n = Integer.parseInt(in.readLine());
			
			TreeMap<String, Integer> map = new TreeMap<>();
			Stack<Integer> temp = new Stack<>();
			String[] reverseMap = new String[n];
			for (int i = 0; i < n; i++) {
				temp.push(i);
				String shell = in.readLine();
				map.put(shell, i);
				reverseMap[i] = shell;
			}
			Stack<Integer> given = new Stack<>();
			while(!temp.isEmpty())
				given.push(temp.pop());
			
			for (int i = 0; i < n; i++) {
				String shell = in.readLine();
				int count = map.get(shell);
				temp.push(count);
			}
			Stack<Integer> ordered = new Stack<>();
			while(!temp.isEmpty())
				ordered.push(temp.pop());
			
			Stack<Integer> tempG = clone(given);
			int count = 1;
			ArrayList<Integer> result = new ArrayList<>();
			while(!equal(tempG, ordered)){
				Stack<Integer> tempO = new Stack<>();
				tempG = clone(given);
				result = new ArrayList<>();
				
				for (int i = 0; i < 1; i++) {
					result.add(ordered.peek());
					tempO.add(ordered.pop());
				}
				
				while(!tempO.isEmpty()){
					tempG = rotate(tempG, tempO.peek());
					ordered.push(tempO.pop());
				}
			}
		}
	}
	
	public static Stack<Integer> rotate(Stack<Integer> x, int i) {
		Stack<Integer> temp = new Stack<>();
		
		while(!x.isEmpty()){
			int poped = x.pop();
			if(poped == i)
				break;
			temp.push(poped);
		}
		
		while(!temp.isEmpty())
			x.push(temp.pop());
		
		x.push(i);
		
		return x;
	}

	public static boolean equal(Stack<Integer> x, Stack<Integer> y){
		Stack<Integer> temp= new Stack<>();
		
		boolean equal = true;
		while(!x.isEmpty()){
			if(x.peek() != y.peek()){
				equal = false;
				break;
			}
			
			temp.add(x.pop());
			y.pop();
		}
		
		while(!temp.isEmpty()){
			x.push(temp.peek());
			y.push(temp.pop());
		}
		
		return equal;
	}
	
	public static Stack<Integer> clone(Stack<Integer> x){
		Stack<Integer> temp = new Stack<>();
		Stack<Integer> res = new Stack<>();
		
		while(!x.isEmpty())
			temp.push(x.pop());
		
		while(!temp.isEmpty()){
			x.push(temp.peek());
			res.push(temp.pop());
		}
		
		return res;
	}
}
